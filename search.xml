<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GraphQL 入门</title>
      <link href="2021/05/21/GraphQL/"/>
      <url>2021/05/21/GraphQL/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。</p><h2 id="restful-api-与-GraphQL"><a href="#restful-api-与-GraphQL" class="headerlink" title="restful api 与 GraphQL"></a>restful api 与 GraphQL</h2><p>restful据url查询所有的字段结构都是固定好的当需要改变字段时只能改接口或是重写接口，会造成资源重复调用的问题<br>grapql按需查询（写法上增加的代码重复性，增加了前端的代码量），需要什么拿什么 只有一个接口</p><table><thead><tr><th></th><th>RESTFul</th><th>GraphQL</th></tr></thead><tbody><tr><td>优点</td><td>接入简单</td><td>查询方便，按需查询</td></tr><tr><td>缺点</td><td>接口管理问题</td><td>会增加架构复杂度</td></tr></tbody></table><h2 id="使用JavaScript-构建项目"><a href="#使用JavaScript-构建项目" class="headerlink" title="使用JavaScript 构建项目"></a>使用JavaScript 构建项目</h2><p>基于 Express webserver 服务器的一个 GraphQL API 服务端参考实现，你可以用它结合常规 Express webserver 来运行 GraphQL，也可以作为独立 GraphQL 服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express express-graphql graphql</span><br></pre></td></tr></table></figure><p>然后使用 node server.js 以运行 server.js 中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> graphqlHTTP = <span class="built_in">require</span>(<span class="string">&#x27;express-graphql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; buildSchema &#125; = <span class="built_in">require</span>(<span class="string">&#x27;graphql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String Int Boolean ID float 是schema的基本数据类型 可以在shema声明时直接使用</span></span><br><span class="line"><span class="keyword">var</span> schema = buildSchema(<span class="string">`</span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    hello: String</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> root = &#123; <span class="attr">hello</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;Hello world!&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(<span class="string">&#x27;/graphql&#x27;</span>, graphqlHTTP(&#123;</span><br><span class="line">  <span class="comment">// 定义方法和类型</span></span><br><span class="line">  schema: schema,</span><br><span class="line">  <span class="comment">// 处理schema</span></span><br><span class="line">  rootValue: root,</span><br><span class="line">  <span class="comment">// graphiql 是否启用调试界面</span></span><br><span class="line">  graphiql: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br><span class="line">app.listen(<span class="number">4000</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Now browse to localhost:4000/graphql&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>当路径不等于 /graphql 或者cookie不等于auth 进入下面逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> middleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url.indexOf(<span class="string">&#x27;/graphql&#x27;</span>) === -<span class="number">1</span> || req.headers.cookie.indexOf(<span class="string">&#x27;auth&#x27;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">      res.send(<span class="string">&#x27;error: 您没有访问权限&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="前端调用"><a href="#前端调用" class="headerlink" title="前端调用"></a>前端调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querys =query <span class="function"><span class="title">classMessage</span>(<span class="params">$name: <span class="built_in">String</span></span>)</span>&#123; classMessage&#123; count, teacherName salary(name: $name) &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> variables =&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">fetch(<span class="string">&#x27;/graphql&#x27;</span>,&#123;</span><br><span class="line">  method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Aceept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    querys,</span><br><span class="line">    variables</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考<br>官方地址：<a href="https://graphql.com/">https://graphql.com/</a><br>中文地址：<a href="https://graphql.cn/">https://graphql.cn/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 代码优化技巧</title>
      <link href="2021/04/02/js-optimize/"/>
      <url>2021/04/02/js-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="获取-Array-最后一条数据"><a href="#获取-Array-最后一条数据" class="headerlink" title="获取 Array 最后一条数据"></a>获取 Array 最后一条数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> item1 = list.splice(-<span class="number">1</span>)[<span class="number">0</span>] <span class="comment">// 4 list = [1,2,3]</span></span><br><span class="line"><span class="keyword">const</span> item2 = list.pop() <span class="comment">// 3 list = [1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice、pop方法都会对原有的Array对象进行拆解，若要保持原有Array完整性则可使用以下方法</span></span><br><span class="line"><span class="keyword">const</span> item3 = list.slice(-<span class="number">1</span>) <span class="comment">// 2 list = [1,2]</span></span><br></pre></td></tr></table></figure><h2 id="获取-Array-中指定的对象"><a href="#获取-Array-中指定的对象" class="headerlink" title="获取 Array 中指定的对象"></a>获取 Array 中指定的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jerry&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取id为 2 的对象</span></span><br><span class="line"><span class="keyword">const</span> item = list.find(<span class="function"><span class="params">ele</span> =&gt;</span> ele.id === <span class="number">2</span>)[<span class="number">0</span>] <span class="comment">// &#123; id: 2, name: &#x27;Jerry&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="判断对象中是否存在该属性"><a href="#判断对象中是否存在该属性" class="headerlink" title="判断对象中是否存在该属性"></a>判断对象中是否存在该属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一 hasOwnProperty</span></span><br><span class="line"><span class="keyword">const</span> property1 = obj.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> property2 = obj.hasOwnProperty(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> property3 = obj.hasOwnProperty(<span class="string">&quot;toString&quot;</span>) <span class="comment">// false 这是一个继承属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty(&#x27;a&#x27;) 判断自有(非继承)属性中是否有属性&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// 若原有对象自有属性包含hasOwnProperty，再使用该方法则会报错，且eslint判定该写法为非正规写法</span></span><br><span class="line"><span class="comment">// 避免这种细微的 bug，可以写为</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 in （判断属性（自有、继承）中是否有属性&#x27;a&#x27;）</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> obj            <span class="comment">//true，自有属性存在</span></span><br><span class="line"><span class="string">&#x27;y&#x27;</span> <span class="keyword">in</span> obj         <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> obj     <span class="comment">//true，是一个继承属性</span></span><br></pre></td></tr></table></figure><h2 id="元素赋值-解构"><a href="#元素赋值-解构" class="headerlink" title="元素赋值(解构)"></a>元素赋值(解构)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const obj = &#123;&#125;</span></span><br><span class="line"><span class="comment">// const arr = []</span></span><br><span class="line"><span class="comment">// const str = &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> [obj, arr, str] = [&#123;&#125;, [], <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const a = data.a</span></span><br><span class="line"><span class="keyword">const</span> &#123; a &#125; = data <span class="comment">// a = 1 </span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [valueString, valueNumber, valueObj] = [<span class="string">&#x27;3.14&#x27;</span>, <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 转 number、boolean</span></span><br><span class="line"><span class="keyword">const</span> number = +valueString <span class="comment">// 3.14</span></span><br><span class="line"><span class="keyword">const</span> boolean = !!valueString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number 转 string、boolean</span></span><br><span class="line"><span class="keyword">const</span> str2 = valueNumber + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> boolean2 = !!valueNumber <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(array) 转 string //于js中array只是特殊一点(key为数字)的object</span></span><br><span class="line"><span class="keyword">const</span> str3 = <span class="built_in">JSON</span>.stringify(valueObj) <span class="comment">// &#x27;&#123;&#x27;a&#x27;:1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// string 转 obj(array)</span></span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="built_in">JSON</span>.parse(str3) <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数 ??"></a>聚合函数 ??</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?? 当前面元素不为 null 或 underfind 时向后执行</span></span><br><span class="line"><span class="keyword">const</span> str =  <span class="literal">NaN</span> ?? <span class="number">123</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="switch-优化"><a href="#switch-优化" class="headerlink" title="switch 优化"></a>switch 优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch (data) &#123;</span></span><br><span class="line"><span class="comment">//  case 1:</span></span><br><span class="line"><span class="comment">//    test1();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"><span class="comment">//  case 2:</span></span><br><span class="line"><span class="comment">//    test2();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"><span class="comment">//  case 3:</span></span><br><span class="line"><span class="comment">//    test();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="number">1</span>: test1,</span><br><span class="line">  <span class="number">2</span>: test2,</span><br><span class="line">  <span class="number">3</span>: test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[something] ?? data[something]()</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [arr, obj] = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅克隆 数据表层（第一层）克隆</span></span><br><span class="line"><span class="keyword">const</span> cloneArr = arr.slice() <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="keyword">const</span> cloneObj = &#123; ...obj &#125; <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="keyword">const</span> cloneArr = [...arr] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深克隆 完全是一个新的对象</span></span><br><span class="line"><span class="keyword">const</span> cloneDeep = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="按位非运算符（-）"><a href="#按位非运算符（-）" class="headerlink" title="按位非运算符（~）"></a>按位非运算符（~）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只适用于32位整数</span></span><br><span class="line"><span class="comment">// 按位非运算符（~），反转操作数的位。</span></span><br><span class="line"><span class="comment">// 操作数被转换为32位二进制表示（0和1）。超过32位的数字将丢弃其最高有效位。</span></span><br><span class="line"><span class="comment">// const a = 5 // 5(0000000000000101)</span></span><br><span class="line"><span class="comment">// const b = ~a  // -6(1111111111111010)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化indexOf</span></span><br><span class="line"><span class="comment">// if(arr.indexOf(item) &gt; -1) &#123;&#125; // item found</span></span><br><span class="line"><span class="comment">// if(arr.indexOf(item) === -1) &#123;&#125; // item not found</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(~arr.indexOf(item)) &#123;&#125; <span class="comment">// item found  ~arr.indexOf(item) 返回值为0</span></span><br><span class="line"><span class="keyword">if</span>(!~arr.indexOf(item)) &#123;&#125; <span class="comment">// item not found!~arr.indexOf(item) 返回值为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果输入为浮点型数据类型，则值会在执行按位操作前通过截断转换为整型值。借此 我们可以向下取整</span></span><br><span class="line"><span class="keyword">const</span> float = <span class="number">1.3</span></span><br><span class="line"><span class="comment">// Math.floor(float) // 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> int = ~~float <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="数组中最大和最小的值"><a href="#数组中最大和最小的值" class="headerlink" title="数组中最大和最小的值"></a>数组中最大和最小的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.max(…arr); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.min(…arr); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>参考 <a href="https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw">https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次使用</title>
      <link href="2021/02/26/test/"/>
      <url>2021/02/26/test/</url>
      
        <content type="html"><![CDATA[<pre><code>这是一次测试1. First item2. Second item3. Third item    1. Indented item        1.min item    2. Indented item4. Fourth item</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
