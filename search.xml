<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 代码优化技巧</title>
      <link href="2021/04/02/js-optimize/"/>
      <url>2021/04/02/js-optimize/</url>
      
        <content type="html"><![CDATA[<h5 id="获取-Array-最后一条数据"><a href="#获取-Array-最后一条数据" class="headerlink" title="获取 Array 最后一条数据"></a>获取 Array 最后一条数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const list &#x3D; [1,2,3,4]</span><br><span class="line"></span><br><span class="line">const item1 &#x3D; list.splice(-1)[0] &#x2F;&#x2F; 4 list &#x3D; [1,2,3]</span><br><span class="line">const item2 &#x3D; list.pop() &#x2F;&#x2F; 3 list &#x3D; [1,2]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; splice、pop方法都会对原有的Array对象进行拆解，若要保持原有Array完整性则可使用以下方法</span><br><span class="line">const item3 &#x3D; list.slice(-1) &#x2F;&#x2F; 2 list &#x3D; [1,2]</span><br></pre></td></tr></table></figure><h5 id="获取-Array-中指定的对象"><a href="#获取-Array-中指定的对象" class="headerlink" title="获取 Array 中指定的对象"></a>获取 Array 中指定的对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const list &#x3D; [&#123; id: 1, name: &#39;Tom&#39;&#125;, &#123; id: 2, name: &#39;Jerry&#39;&#125;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取id为 2 的对象</span><br><span class="line">const item &#x3D; list.find(ele &#x3D;&gt; ele.id &#x3D;&#x3D;&#x3D; 2) &#x2F;&#x2F; &#123; id: 2, name: &#39;Jerry&#39;&#125;</span><br></pre></td></tr></table></figure><h5 id="判断对象中是否存在该属性"><a href="#判断对象中是否存在该属性" class="headerlink" title="判断对象中是否存在该属性"></a>判断对象中是否存在该属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const obj &#x3D; &#123; a: 1, b: 2 &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法一 hasOwnProperty</span><br><span class="line">const property1 &#x3D; obj.hasOwnProperty(&#39;a&#39;) &#x2F;&#x2F; true</span><br><span class="line">const property2 &#x3D; obj.hasOwnProperty(&#39;c&#39;) &#x2F;&#x2F; false</span><br><span class="line">const property3 &#x3D; obj.hasOwnProperty(&quot;toString&quot;) &#x2F;&#x2F; false 这是一个继承属性</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; hasOwnProperty(&#39;a&#39;) 判断自有(非继承)属性中是否有属性&#39;a&#39;</span><br><span class="line">&#x2F;&#x2F; 若原有对象自有属性包含hasOwnProperty，再使用该方法则会报错，且eslint判定该写法为非正规写法</span><br><span class="line">&#x2F;&#x2F; 避免这种细微的 bug，可以写为</span><br><span class="line">Object.prototype.hasOwnProperty.call(obj, &#39;a&#39;) &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法二 in （判断属性（自有、继承）中是否有属性&#39;a&#39;）</span><br><span class="line">&#39;a&#39; in obj            &#x2F;&#x2F;true，自有属性存在</span><br><span class="line">&#39;y&#39; in obj         &#x2F;&#x2F;false</span><br><span class="line">&#39;toString&#39; in obj     &#x2F;&#x2F;true，是一个继承属性</span><br></pre></td></tr></table></figure><h5 id="元素赋值-解构"><a href="#元素赋值-解构" class="headerlink" title="元素赋值(解构)"></a>元素赋值(解构)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; const obj &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; const arr &#x3D; []</span><br><span class="line">&#x2F;&#x2F; const str &#x3D; &#39;&#39;</span><br><span class="line">const [obj, arr, str] &#x3D; [&#123;&#125;, [], &#39;&#39;]</span><br><span class="line"></span><br><span class="line">const data &#x3D; &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const a &#x3D; data.a</span><br><span class="line">const &#123; a &#125; &#x3D; data &#x2F;&#x2F; a &#x3D; 1 </span><br></pre></td></tr></table></figure><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const [valueString, valueNumber, valueObj] &#x3D; [&#39;3.14&#39;, 123, &#123; a: 1 &#125;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; string 转 number、boolean</span><br><span class="line">const number &#x3D; +valueString &#x2F;&#x2F; 3.14</span><br><span class="line">const boolean &#x3D; !!valueString &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; number 转 string、boolean</span><br><span class="line">const str2 &#x3D; valueNumber + &#39;&#39; &#x2F;&#x2F; &#39;123&#39;</span><br><span class="line">const boolean2 &#x3D; !!valueNumber &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;object(array) 转 string &#x2F;&#x2F;于js中array只是特殊一点(key为数字)的object</span><br><span class="line">const str3 &#x3D; JSON.stringify(valueObj) &#x2F;&#x2F; &#39;&#123;&#39;a&#39;:1&#125;&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; string 转 obj(array)</span><br><span class="line">const obj4 &#x3D; JSON.parse(str3) &#x2F;&#x2F; &#123; a: 1 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="switch-优化"><a href="#switch-优化" class="headerlink" title="switch 优化"></a>switch 优化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; switch (data) &#123;</span><br><span class="line">&#x2F;&#x2F;  case 1:</span><br><span class="line">&#x2F;&#x2F;    test1();</span><br><span class="line">&#x2F;&#x2F;  break;</span><br><span class="line">&#x2F;&#x2F;  case 2:</span><br><span class="line">&#x2F;&#x2F;    test2();</span><br><span class="line">&#x2F;&#x2F;  break;</span><br><span class="line">&#x2F;&#x2F;  case 3:</span><br><span class="line">&#x2F;&#x2F;    test();</span><br><span class="line">&#x2F;&#x2F;  break;</span><br><span class="line"></span><br><span class="line">const data &#x3D; &#123;</span><br><span class="line">  1: test1,</span><br><span class="line">  2: test2,</span><br><span class="line">  3: test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[something] &amp;&amp; data[something]()</span><br></pre></td></tr></table></figure><h5 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const [arr, obj] &#x3D; [[1, 2, 3], &#123; a: 1 &#125;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 浅克隆 数据表层（第一层）克隆</span><br><span class="line">const cloneArr &#x3D; arr.slice() &#x2F;&#x2F; [1, 2, 3]</span><br><span class="line">const cloneObj &#x3D; &#123; ...obj &#125; &#x2F;&#x2F; &#123; a: 1 &#125;</span><br><span class="line">const cloneArr &#x3D; [...arr] &#x2F;&#x2F; [1, 2, 3]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 深克隆 完全是一个新的对象</span><br><span class="line">const cloneDeep &#x3D; JSON.parse(JSON.stringify(obj)) &#x2F;&#x2F; &#123; a: 1 &#125;</span><br></pre></td></tr></table></figure><h5 id="按位非运算符（-）"><a href="#按位非运算符（-）" class="headerlink" title="按位非运算符（~）"></a>按位非运算符（~）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 只适用于32位整数</span><br><span class="line">&#x2F;&#x2F; 按位非运算符（~），反转操作数的位。</span><br><span class="line">&#x2F;&#x2F; 操作数被转换为32位二进制表示（0和1）。超过32位的数字将丢弃其最高有效位。</span><br><span class="line">&#x2F;&#x2F; const a &#x3D; 5 &#x2F;&#x2F; 5(0000000000000101)</span><br><span class="line">&#x2F;&#x2F; const b &#x3D; ~a  &#x2F;&#x2F; -6(1111111111111010)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简化indexOf</span><br><span class="line">&#x2F;&#x2F; if(arr.indexOf(item) &gt; -1) &#123;&#125; &#x2F;&#x2F; item found</span><br><span class="line">&#x2F;&#x2F; if(arr.indexOf(item) &#x3D;&#x3D;&#x3D; -1) &#123;&#125; &#x2F;&#x2F; item not found</span><br><span class="line"></span><br><span class="line">if(~arr.indexOf(item)) &#123;&#125; &#x2F;&#x2F; item found  ~arr.indexOf(item) 返回值为0</span><br><span class="line">if(!~arr.indexOf(item)) &#123;&#125; &#x2F;&#x2F; item not found!~arr.indexOf(item) 返回值为true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果输入为浮点型数据类型，则值会在执行按位操作前通过截断转换为整型值。借此 我们可以向下取整</span><br><span class="line">const float &#x3D; 1.3</span><br><span class="line">&#x2F;&#x2F; Math.floor(float) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">const int &#x3D; ~~float &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><h5 id="数组中最大和最小的值"><a href="#数组中最大和最小的值" class="headerlink" title="数组中最大和最小的值"></a>数组中最大和最小的值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [1, 2, 3]</span><br><span class="line"></span><br><span class="line">Math.max(…arr); &#x2F;&#x2F; 3</span><br><span class="line">Math.min(…arr); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><p>参考 <a href="https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw">https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次使用</title>
      <link href="2021/02/26/test/"/>
      <url>2021/02/26/test/</url>
      
        <content type="html"><![CDATA[<pre><code>这是一次测试1. First item2. Second item3. Third item    1. Indented item        1.min item    2. Indented item4. Fourth item</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
