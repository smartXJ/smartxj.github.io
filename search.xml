<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CubeJs</title>
      <link href="2021/05/21/CubeJs/"/>
      <url>2021/05/21/CubeJs/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CubeJs是一个用于构建分析web应用程序的开源框架，主要用于构建内部的商业智能工具或将面向客户的分析添加到现有的应用程序当中。<br>Cubejs可分为前端和后端<br>通常，Cube.js的后端作为服务运行，管理与数据库的连接，包括查询队列，缓存，预聚合等。同时为前端应用程序公开一个API，用于构建仪表板和其他分析功能。</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="配置-连接数据库"><a href="#配置-连接数据库" class="headerlink" title="配置 连接数据库"></a>配置 连接数据库</h3><p>方式一：环境变量中配置（.env）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CUBEJS_DB_HOST&#x3D;&lt;YOUR_DB_HOST_HERE&gt;</span><br><span class="line">CUBEJS_DB_NAME&#x3D;&lt;YOUR_DB_NAME_HERE&gt;</span><br><span class="line">CUBEJS_DB_USER&#x3D;&lt;YOUR_DB_USER_HERE&gt;</span><br><span class="line">CUBEJS_DB_PASS&#x3D;&lt;YOUR_DB_PASS_HERE&gt;</span><br><span class="line">CUBEJS_DB_TYPE&#x3D;postgres</span><br><span class="line">CUBEJS_API_SECRET&#x3D;secret</span><br></pre></td></tr></table></figure><p>方式二：配置文件中配置(cube.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cube.js configuration options: https://cube.dev/docs/config</span></span><br><span class="line"><span class="keyword">const</span> PostgresDriver = <span class="built_in">require</span>(<span class="string">&#x27;@cubejs-backend/postgres-driver&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">  dbType: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  <span class="comment">// driverFactory中第一个参数是schema文件的内容</span></span><br><span class="line">  driverFactory: <span class="function">(<span class="params">&#123; dataSource &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PostgresDriver(&#123;</span><br><span class="line">      database: <span class="string">&#x27;you_database&#x27;</span>,</span><br><span class="line">      host: <span class="string">&#x27;you_host&#x27;</span>,</span><br><span class="line">      user: <span class="string">&#x27;you_user&#x27;</span>,</span><br><span class="line">      password: <span class="string">&#x27;your_password&#x27;</span>,</span><br><span class="line">      port: <span class="number">5432</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Cube.js文件优先级别高于.env<br>根据不同数据库所需要的配置项会有所不同，上面展示的是PostgresSQL<br>配置项路径：<a href="https://cube.dev/docs/connecting-to-the-database">https://cube.dev/docs/connecting-to-the-database</a></p><h3 id="编写Schema"><a href="#编写Schema" class="headerlink" title="编写Schema"></a>编写Schema</h3><p>表的基本信息、表与表之间的联系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cube(<span class="string">`Comment`</span>, &#123;</span><br><span class="line">  sql: <span class="string">`SELECT * FROM public.&quot;Comment&quot;`</span>,</span><br><span class="line">  <span class="comment">// 与别的表之间的联系</span></span><br><span class="line">  joins: &#123;</span><br><span class="line">    <span class="comment">// Login: &#123;</span></span><br><span class="line">    <span class="comment">//   relationship: `belongsTo`,</span></span><br><span class="line">    <span class="comment">//   sql: `$&#123;Login&#125;.&quot;userId&quot; = $&#123;Comment&#125;.&quot;userId&quot;`</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 一般为聚合表达式</span></span><br><span class="line">  measures: &#123;</span><br><span class="line">    count: &#123;</span><br><span class="line">      type: <span class="string">`count`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  dimensions: &#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">      sql: <span class="string">`id`</span>,</span><br><span class="line">      type: <span class="string">`number`</span>,</span><br><span class="line">      primaryKey: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    content: &#123;</span><br><span class="line">      sql: <span class="string">`content`</span>,</span><br><span class="line">      type: <span class="string">`string`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 所属数据库</span></span><br><span class="line">  dataSource: <span class="string">`wanglei_pg`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Schema主要参数</p></blockquote><blockquote><ul><li>Dimensions（维度）:维度确定如何对可视化内容数据分组，通常呈现在条形图的 X 轴上或饼图的切片上，例如时间、区域、产品类型等。</li></ul></blockquote><blockquote><ul><li>Measures（度量）:度量是在可视化中使用的计算，结果为具体的参考数值，通常呈现在条形图的 Y 轴上或表格的列中。度量通过由聚合函数（例如 Sum 或 Max）组成的与一个或多个字段组合的表达式创建，例如蒸发量、降水量、销售额等。</li></ul></blockquote><blockquote><ul><li>joins：编写表之间的关系（同数据库是用列连接而跨库则是dimension连接）</li></ul></blockquote><p>extends</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extends 可以方便实现cube 的复用，类似继承</span></span><br><span class="line">cube(<span class="string">`VipUser`</span>, &#123;</span><br><span class="line">  <span class="keyword">extends</span>: Login,</span><br><span class="line">  sql: <span class="string">`select * from <span class="subst">$&#123;Login.sql()&#125;</span> where type = 1`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="预聚合"><a href="#预聚合" class="headerlink" title="预聚合"></a>预聚合</h3><p>预聚合是物化的查询结果，以表的形式持久保持（根据所填写的信息来在外部数据库构建表。若查询条件符合预聚合所填写的条件，则会从预聚合构建的表进行查询）<br>之前所连接的数据库是又称之为内部数据库，若要使用预聚合则还需要添加外部数据库连接<br>cube.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部数据库类型</span></span><br><span class="line">externalDbType: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line"><span class="comment">// 外部数据库信息</span></span><br><span class="line">externalDriverFactory: <span class="function">(<span class="params">&#123; dataSource &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> PostgresDriver(&#123;</span><br><span class="line">    database: <span class="string">&#x27;wanglei_pg&#x27;</span>,</span><br><span class="line">    host: <span class="string">&#x27;pg.test.smartahc.com&#x27;</span>,</span><br><span class="line">    user: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;smart123&#x27;</span>,</span><br><span class="line">    port: <span class="number">5432</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>schema文件（表信息文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">preAggregations: &#123;</span><br><span class="line">  <span class="comment">// 预聚合</span></span><br><span class="line">  loginRollup: &#123;</span><br><span class="line">    type: <span class="string">`rollup`</span>,</span><br><span class="line">    measureReferences: [Login.count],</span><br><span class="line">    dimensionReferences: [Login.msg],</span><br><span class="line">    <span class="comment">// 时间维度</span></span><br><span class="line">    timeDimensionReference: date,</span><br><span class="line">    <span class="comment">// 时间维度分类 按天来统计数据</span></span><br><span class="line">    granularity: <span class="string">`day`</span>,</span><br><span class="line">    <span class="comment">// 分区 partitionGranularity可以是day，week或month。例如，如果将partitionGranularity设置为month，则Cube.js将为rollup每个月生成单独的 表</span></span><br><span class="line">    <span class="comment">// partitionGranularity: `month`,</span></span><br><span class="line">    external: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 两个预聚合组合在一起，可以实现跨数据库查询</span></span><br><span class="line">  joinedWithUsersRollup: &#123;</span><br><span class="line">    type: <span class="string">`rollupJoin`</span>,</span><br><span class="line">    measureReferences: [Login.count],</span><br><span class="line">    dimensionReferences: [Users.token],</span><br><span class="line">    rollupReferences: [Users.usersRollup, Login.loginRollup],</span><br><span class="line">    external: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>两表连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与其他表之间的联系</span></span><br><span class="line">joins: &#123;</span><br><span class="line">  <span class="comment">// 同数据库连接 使用列进行连接</span></span><br><span class="line">  Comment: &#123;</span><br><span class="line">    relationship: <span class="string">`hasMany`</span>,</span><br><span class="line">    sql: <span class="string">`<span class="subst">$&#123;Login&#125;</span>.&quot;userId&quot; = <span class="subst">$&#123;Comment&#125;</span>.&quot;userId&quot;`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 跨数据库连接 使用dimension进行连接</span></span><br><span class="line">  Users: &#123;</span><br><span class="line">    relationship: <span class="string">`belongsTo`</span>,</span><br><span class="line">  <span class="comment">// $&#123;CUBE&#125; 为当前schema</span></span><br><span class="line">    sql: <span class="string">`<span class="subst">$&#123;CUBE.msg&#125;</span> = <span class="subst">$&#123;Users.token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cubejsApi = cubejs(</span><br><span class="line">   <span class="comment">// token</span></span><br><span class="line">   <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MjEzMzc5NjcsImV4cCI6MTYyMTQyNDM2N30.JBwrY8vaKPav4RKD5iFiSSNnV1PFpAcbSVO7ME7pP3I&#x27;</span>,</span><br><span class="line">   <span class="comment">// apiUrl</span></span><br><span class="line">   &#123; <span class="attr">apiUrl</span>: <span class="string">&#x27;http://localhost:4000/cubejs-api/v1&#x27;</span> &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">const</span> resultSet = <span class="keyword">await</span> cubejsApi.load(&#123;</span><br><span class="line">       measures: [<span class="string">&#x27;Login.count&#x27;</span>],</span><br><span class="line">       timeDimensions: [</span><br><span class="line">         &#123;</span><br><span class="line">           dimension: <span class="string">&#x27;Login.date&#x27;</span>,</span><br><span class="line">           <span class="comment">// 时间维度</span></span><br><span class="line">           granularity: <span class="string">&#x27;day&#x27;</span>,</span><br><span class="line">          <span class="comment">// 时间范围</span></span><br><span class="line">           dateRange: [</span><br><span class="line">             <span class="string">&quot;2021-05-11&quot;</span>,</span><br><span class="line">             <span class="string">&quot;2021-06-15&quot;</span></span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       <span class="comment">// 排序</span></span><br><span class="line">       order: &#123;<span class="comment">// &quot;Login.count&quot;: &#x27;desc&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 过滤信息</span></span><br><span class="line">       filters: [</span><br><span class="line">         <span class="comment">// 只需要price &gt; 2 的信息</span></span><br><span class="line">         &#123;</span><br><span class="line">           member: <span class="string">&quot;Login.price&quot;</span>,</span><br><span class="line">           operator: <span class="string">&quot;gt&quot;</span>,</span><br><span class="line">           values: [</span><br><span class="line">             <span class="string">&quot;2&quot;</span></span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       dimensions: [<span class="string">&#x27;Login.type&#x27;</span>],</span><br><span class="line">       <span class="comment">// 数据数量</span></span><br><span class="line">       limit: <span class="number">50</span></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CubeJs的使用方式与GraphQL有些相似，后端构建表的基本信息，前端根据这些信息来获取所需的数据。不同的是CubeJs可操作多个数据库也可以跨数据库查询，且对于SQL语句查询更加完备。。</p><p>CubeJs虽然具有动态生成Schema与仪表盘的功能，但过于简单，显得有点鸡肋。</p><p>CubeJs数据获取的底层是SQL语句，没有产生多余的字段，加之预聚合的使用使其查询速度快捷。<br>综上所诉，CubeJs只有数据库SQL查询符合我们的要求，可配置的数据以及可以跨数据库查询。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL 入门</title>
      <link href="2021/05/21/GraphQL/"/>
      <url>2021/05/21/GraphQL/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。</p><h2 id="使用JavaScript-构建项目"><a href="#使用JavaScript-构建项目" class="headerlink" title="使用JavaScript 构建项目"></a>使用JavaScript 构建项目</h2><p>基于 Express webserver 服务器的一个 GraphQL API 服务端参考实现，你可以用它结合常规 Express webserver 来运行 GraphQL，也可以作为独立 GraphQL 服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express express-graphql graphql</span><br></pre></td></tr></table></figure><p>然后使用 node server.js 以运行 server.js 中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; graphqlHTTP &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-graphql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; buildSchema &#125; = <span class="built_in">require</span>(<span class="string">&#x27;graphql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String Int Boolean ID float 是schema的基本数据类型 可以在shema声明时直接使用</span></span><br><span class="line"><span class="keyword">var</span> schema = buildSchema(<span class="string">`</span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    hello: String,</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> root = &#123; <span class="attr">hello</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;Hello world!&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(<span class="string">&#x27;/graphql&#x27;</span>, graphqlHTTP(&#123;</span><br><span class="line">  <span class="comment">// 定义方法和类型</span></span><br><span class="line">  schema: schema,</span><br><span class="line">  <span class="comment">// 处理schema 逻辑处理，需要放回的值</span></span><br><span class="line">  rootValue: root,</span><br><span class="line">  <span class="comment">// graphiql 是否启用调试界面</span></span><br><span class="line">  graphiql: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br><span class="line">app.listen(<span class="number">4000</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Now browse to localhost:4000/graphql&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="Query查询"><a href="#Query查询" class="headerlink" title="Query查询"></a>Query查询</h3><p>type Query 必须存在, Query为查询的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 是自定义的一个数据类型</span></span><br><span class="line"><span class="keyword">var</span> schema = buildSchema(<span class="string">`</span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    hello: String,</span></span><br><span class="line"><span class="string">    userList: [User],</span></span><br><span class="line"><span class="string">    user(name: String!): User</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  type User &#123;</span></span><br><span class="line"><span class="string">    id: Int,</span></span><br><span class="line"><span class="string">    name: String</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><h3 id="Mutation变更"><a href="#Mutation变更" class="headerlink" title="Mutation变更"></a>Mutation变更</h3><p>GraphQL 建立了一个规范，任何修改数据的操作都应该使用 mutation 来发送。</p><p>input 表示输入对象，看上去和普通对象一摸一样，除了关键字是 input 而不是 type。它的特别之处在于，输入对象可以用在复杂的参数中，经常是 mutation 的参数，比如下面 createUser 的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input UserInput &#123;</span><br><span class="line">  id: Int!</span><br><span class="line">  name: <span class="built_in">String</span>!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Mutation &#123;</span><br><span class="line">  createUser(user: UserInput!): User!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>对query 和 mutation 的逻辑操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 充当数据库</span></span><br><span class="line"><span class="keyword">const</span> userList = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Joke&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> root = &#123;</span><br><span class="line">  <span class="comment">// hello查询</span></span><br><span class="line">  hello: <span class="function">() =&gt;</span> <span class="string">&#x27;Hello world!&#x27;</span>,</span><br><span class="line">  <span class="comment">// 获取所有user</span></span><br><span class="line">  userList: <span class="function">() =&gt;</span> userList,</span><br><span class="line">  <span class="comment">// 根据名字获取user</span></span><br><span class="line">  user: <span class="function">(<span class="params">parent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取传入的参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name &#125; = parent;</span><br><span class="line">    <span class="comment">// find user by name...</span></span><br><span class="line">    <span class="keyword">const</span> user = userList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.name === name)</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 创建user</span></span><br><span class="line">  createUser:<span class="function">(<span class="params">parent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = parent</span><br><span class="line">    userList.push(user)</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端调用方法 与restful API 一样<br>不过是body内的传参变成了固定的几个参数</p><blockquote><ul><li>query: 查询语句</li><li>variables: 传入参数，若为空可以不传</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> variables = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> query = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 查询user name为Tom 的user 查询时可去掉query</span></span><br><span class="line"><span class="comment">// query =&#x27;query user($name: String!)&#123; user(name:$name) &#123; id, name&#125; &#125;&#x27;</span></span><br><span class="line"><span class="comment">// 传入name的值</span></span><br><span class="line"><span class="comment">// variables = &#123;name:&#x27;Tom&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 或者 也可以这么写 将传入的值写入query内</span></span><br><span class="line"><span class="comment">// query = &#x27;&#123;user(name:&quot;Tom&quot;)&#123;id&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建user</span></span><br><span class="line"><span class="comment">// query = &#x27; mutation createUser($user: UserInput!)&#123; createUser(user:$user)&#123; id, name &#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment">// variables = &#123;</span></span><br><span class="line"><span class="comment">//   user: &#123;id: 4, name: &#x27;xiao&#x27;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// query = &#x27;mutation &#123; createUser( user:&#123; id: 5, name: &quot;xiao&quot; &#125;)&#123; id, name &#125; &#125;&#x27;</span></span><br><span class="line">fetch(<span class="string">&#x27;http://localhost:4000/graphql&#x27;</span>,&#123;</span><br><span class="line">  method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Aceept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    query,</span><br><span class="line">    <span class="comment">// variables</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//查询user &#123; data: &#123; user: &#123; id: 1, name: &#x27;Tom&#x27;&#125; &#125; &#125;</span></span><br><span class="line">  <span class="comment">//创建user &#123; data: &#123; user: &#123; id: 4, name: &#x27;xiao&#x27;&#125; &#125; &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>restful据url查询所有的字段结构都是固定好的当需要改变字段时只能改接口或是重写接口，会造成资源重复调用的问题<br>grapql按需查询（写法上增加的代码重复性，增加了前端的代码量），需要什么拿什么 只有一个接口<br>grapql不包含任何SQL语句，数据库处理，它只是将数据拿到之后进行一下过滤，再返回给前端</p><p>下面是RESTFul与GraphQL 大概的比较<br>|     | RESTFul  | GraphQL |<br>|  —-  | —-  | —- |<br>| 优点  | 接入简单 | 查询方便，按需查询 |<br>| 缺点  | 接口管理问题 | 会增加架构复杂度 |</p><p>参考<br>官方地址：<a href="https://graphql.com/">https://graphql.com/</a><br>中文地址：<a href="https://graphql.cn/">https://graphql.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 代码优化技巧</title>
      <link href="2021/04/02/js-optimize/"/>
      <url>2021/04/02/js-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="获取-Array-最后一条数据"><a href="#获取-Array-最后一条数据" class="headerlink" title="获取 Array 最后一条数据"></a>获取 Array 最后一条数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> item1 = list.splice(-<span class="number">1</span>)[<span class="number">0</span>] <span class="comment">// 4 list = [1,2,3]</span></span><br><span class="line"><span class="keyword">const</span> item2 = list.pop() <span class="comment">// 3 list = [1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice、pop方法都会对原有的Array对象进行拆解，若要保持原有Array完整性则可使用以下方法</span></span><br><span class="line"><span class="keyword">const</span> item3 = list.slice(-<span class="number">1</span>) <span class="comment">// 2 list = [1,2]</span></span><br></pre></td></tr></table></figure><h2 id="获取-Array-中指定的对象"><a href="#获取-Array-中指定的对象" class="headerlink" title="获取 Array 中指定的对象"></a>获取 Array 中指定的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jerry&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取id为 2 的对象</span></span><br><span class="line"><span class="keyword">const</span> item = list.find(<span class="function"><span class="params">ele</span> =&gt;</span> ele.id === <span class="number">2</span>)[<span class="number">0</span>] <span class="comment">// &#123; id: 2, name: &#x27;Jerry&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="判断对象中是否存在该属性"><a href="#判断对象中是否存在该属性" class="headerlink" title="判断对象中是否存在该属性"></a>判断对象中是否存在该属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一 hasOwnProperty</span></span><br><span class="line"><span class="keyword">const</span> property1 = obj.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> property2 = obj.hasOwnProperty(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> property3 = obj.hasOwnProperty(<span class="string">&quot;toString&quot;</span>) <span class="comment">// false 这是一个继承属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty(&#x27;a&#x27;) 判断自有(非继承)属性中是否有属性&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// 若原有对象自有属性包含hasOwnProperty，再使用该方法则会报错，且eslint判定该写法为非正规写法</span></span><br><span class="line"><span class="comment">// 避免这种细微的 bug，可以写为</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 in （判断属性（自有、继承）中是否有属性&#x27;a&#x27;）</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> obj            <span class="comment">//true，自有属性存在</span></span><br><span class="line"><span class="string">&#x27;y&#x27;</span> <span class="keyword">in</span> obj         <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> obj     <span class="comment">//true，是一个继承属性</span></span><br></pre></td></tr></table></figure><h2 id="元素赋值-解构"><a href="#元素赋值-解构" class="headerlink" title="元素赋值(解构)"></a>元素赋值(解构)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const obj = &#123;&#125;</span></span><br><span class="line"><span class="comment">// const arr = []</span></span><br><span class="line"><span class="comment">// const str = &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> [obj, arr, str] = [&#123;&#125;, [], <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const a = data.a</span></span><br><span class="line"><span class="keyword">const</span> &#123; a &#125; = data <span class="comment">// a = 1 </span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [valueString, valueNumber, valueObj] = [<span class="string">&#x27;3.14&#x27;</span>, <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 转 number、boolean</span></span><br><span class="line"><span class="keyword">const</span> number = +valueString <span class="comment">// 3.14</span></span><br><span class="line"><span class="keyword">const</span> boolean = !!valueString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number 转 string、boolean</span></span><br><span class="line"><span class="keyword">const</span> str2 = valueNumber + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> boolean2 = !!valueNumber <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(array) 转 string //于js中array只是特殊一点(key为数字)的object</span></span><br><span class="line"><span class="keyword">const</span> str3 = <span class="built_in">JSON</span>.stringify(valueObj) <span class="comment">// &#x27;&#123;&#x27;a&#x27;:1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// string 转 obj(array)</span></span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="built_in">JSON</span>.parse(str3) <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数 ??"></a>聚合函数 ??</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?? 当前面元素不为 null 或 underfind 时向后执行</span></span><br><span class="line"><span class="keyword">const</span> str =  <span class="literal">NaN</span> ?? <span class="number">123</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="switch-优化"><a href="#switch-优化" class="headerlink" title="switch 优化"></a>switch 优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch (data) &#123;</span></span><br><span class="line"><span class="comment">//  case 1:</span></span><br><span class="line"><span class="comment">//    test1();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"><span class="comment">//  case 2:</span></span><br><span class="line"><span class="comment">//    test2();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"><span class="comment">//  case 3:</span></span><br><span class="line"><span class="comment">//    test();</span></span><br><span class="line"><span class="comment">//  break;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="number">1</span>: test1,</span><br><span class="line">  <span class="number">2</span>: test2,</span><br><span class="line">  <span class="number">3</span>: test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[something] ?? data[something]()</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [arr, obj] = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅克隆 数据表层（第一层）克隆</span></span><br><span class="line"><span class="keyword">const</span> cloneArr = arr.slice() <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="keyword">const</span> cloneObj = &#123; ...obj &#125; <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="keyword">const</span> cloneArr = [...arr] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深克隆 完全是一个新的对象</span></span><br><span class="line"><span class="keyword">const</span> cloneDeep = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="按位非运算符（-）"><a href="#按位非运算符（-）" class="headerlink" title="按位非运算符（~）"></a>按位非运算符（~）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只适用于32位整数</span></span><br><span class="line"><span class="comment">// 按位非运算符（~），反转操作数的位。</span></span><br><span class="line"><span class="comment">// 操作数被转换为32位二进制表示（0和1）。超过32位的数字将丢弃其最高有效位。</span></span><br><span class="line"><span class="comment">// const a = 5 // 5(0000000000000101)</span></span><br><span class="line"><span class="comment">// const b = ~a  // -6(1111111111111010)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化indexOf</span></span><br><span class="line"><span class="comment">// if(arr.indexOf(item) &gt; -1) &#123;&#125; // item found</span></span><br><span class="line"><span class="comment">// if(arr.indexOf(item) === -1) &#123;&#125; // item not found</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(~arr.indexOf(item)) &#123;&#125; <span class="comment">// item found  ~arr.indexOf(item) 返回值为0</span></span><br><span class="line"><span class="keyword">if</span>(!~arr.indexOf(item)) &#123;&#125; <span class="comment">// item not found!~arr.indexOf(item) 返回值为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果输入为浮点型数据类型，则值会在执行按位操作前通过截断转换为整型值。借此 我们可以向下取整</span></span><br><span class="line"><span class="keyword">const</span> float = <span class="number">1.3</span></span><br><span class="line"><span class="comment">// Math.floor(float) // 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> int = ~~float <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="数组中最大和最小的值"><a href="#数组中最大和最小的值" class="headerlink" title="数组中最大和最小的值"></a>数组中最大和最小的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.max(…arr); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.min(…arr); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>参考 <a href="https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw">https://mp.weixin.qq.com/s/jO7hoh1ffESq8jBfuXZ9Vw</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次使用</title>
      <link href="2021/02/26/test/"/>
      <url>2021/02/26/test/</url>
      
        <content type="html"><![CDATA[<pre><code>这是一次测试1. First item2. Second item3. Third item    1. Indented item        1.min item    2. Indented item4. Fourth item</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
